2) Priority Queues - the most popular application of heaps

	It maintains a set of elements , each associated with a key .
	Functions for max_priority queue :

Heap_Maximum(A)           // return element with largest key
	return A[1]

Heap_extract_max():       // removes and returns element with largest key
	if A.heap_size < 1
		return -1

	m = A[1]
	A[1] = A[A.heap_size]
	A.heap_size--
	Max_heapify(A,1)
	return m

Heap_Increase_key( A, i , key ):      // change A[i] = x to A[i] = key
	if A[i] > key 
		error
	A[i] = key              // may disturb parents
	while i>1 && A[Parent(i)] < A[i] :
		swap( A[i] , A[Parent(i)] )
		i = Parent(i)

// Above function traverses from node towards root to find proper place for the newly changed key .

Max_heap_insert(A , key):
	A.heap_size ++
	A[ A.heap_size ] = -INF
	Heap_Increase_key( A, A.heap_size , key)

eg. { 15, 13 , 9 , 5, 12, 8, 7, 4, 0, 6, 2, 1 }

All the above functions have complexity O (log n) except Heap_Maximum !
